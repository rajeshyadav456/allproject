"""
Django settings for soteria project.

Generated by 'django-admin startproject' using Django 4.0.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""
import os
import pathlib
import re
import tempfile
from datetime import timedelta

import environ
from celery.schedules import crontab
from configurations import Configuration
from corsheaders.defaults import default_headers as cors_default_headers

env = environ.Env()

# Base directory of soteria project
BASE_DIR = pathlib.Path(__file__).parent.resolve()
BASE_ROOT_DIR = (BASE_DIR / ".." / ".." / "..").resolve()

DJANGO_CONFIGURATION = os.environ.get("DJANGO_CONFIGURATION", "Development")
DJANGO_ENV = str(DJANGO_CONFIGURATION).lower()
DEFAULT_CLIENT_HOSTS = "localhost,127.0.0.1,0.0.0.0"
VALID_ENVIRONMENTS = (
    "production",
    "staging",
    "development",
)


#######################
# Helper functions   #
#####################


def load_env(environment):
    environment = str(environment).lower()
    if environment not in VALID_ENVIRONMENTS:
        raise Exception(f"Invalid environment value : {environment}")

    valid_env_filenames = [f"{environment}.env", f".env.{environment}"]
    env_file_path = None
    for env_filename in valid_env_filenames:
        env_file_path = os.path.join(BASE_ROOT_DIR, env_filename)
        try:
            os.stat(env_file_path)
            print(f'Loading "{env_file_path}" environment variable file')
            break
        except os.error:
            env_file_path = None
            pass

    if env_file_path is None:
        raise Exception(
            f"Not found any valid environment file, tried loading" f" {valid_env_filenames}"
        )

    # load environment variables from env file
    env.read_env(env_file_path)


def get_list(text):
    return [item.strip() for item in text.split(",")]


def get_tenant_apps(TENANT_APPS, SHARED_APPS):
    return [app for app in TENANT_APPS if app not in SHARED_APPS]


#################################################
# Django configuration setup and declarations  #
###############################################

load_env(DJANGO_ENV)


class BaseConfiguration(Configuration):
    ENV = DJANGO_ENV
    BASE_DIR = BASE_DIR
    BASE_ROOT_DIR = BASE_ROOT_DIR

    # SECURITY WARNING: keep the secret key used in production secret!
    SECRET_KEY = env("SECRET_KEY")

    CRYPTOGRAPHY_KEY = env(
        "CRYPTOGRAPHY_KEY",
        default=SECRET_KEY,
    )

    # SECURITY WARNING: don't run with debug turned on in production!
    DEBUG = env.bool("DEBUG", default=True)

    ALLOWED_HOSTS = get_list(env("ALLOWED_HOSTS", default=DEFAULT_CLIENT_HOSTS))

    # For Apps configure , Please refer
    # https://django-tenants.readthedocs.io/en/latest/install.html#configure-tenant-and-shared-applications

    # These app's data are stored on the public schema
    SHARED_APPS = (
        # mandatory, should always be before any django app
        "django_tenants",
        # django contrib apps
        "django.contrib.admin",
        "django.contrib.auth",
        "django.contrib.contenttypes",
        "django.contrib.sessions",
        "django.contrib.messages",
        "django.contrib.staticfiles",
        "django.contrib.gis",
        # third party apps
        "rest_framework",
        "corsheaders",
        "storages",
        "django_filters",
        # soteria apps,
        "soteria",
        "soteria.notifications",
        # put every tenant app here also
        # public schema to have the same structure like tenant apps
        "soteria.orgs",
        "soteria.atms",
        "soteria.tms",
    )

    #  These app's data are stored on their specific schemas
    TENANT_APPS = (
        # intentionally as it can't be blank
        "django.contrib.contenttypes",
        # your tenant-specific apps
        "soteria.orgs",
        "soteria.atms",
        "soteria.tms",
    )

    # Application definition
    INSTALLED_APPS = list(SHARED_APPS) + get_tenant_apps(TENANT_APPS, SHARED_APPS)
    DEFAULT_JOB_TIMEZONE = env("DEFAULT_JOB_TIMEZONE", default="Asia/Kolkata")

    TENANT_MODEL = "soteria.Organization"
    TENANT_DOMAIN_MODEL = "soteria.Domain"

    MIDDLEWARE = [
        # add this at the top , so each request set to correct schema
        "soteria.middleware.organization.OrganizationHeaderMiddleware",
        "django.middleware.security.SecurityMiddleware",
        "django.contrib.sessions.middleware.SessionMiddleware",
        "corsheaders.middleware.CorsMiddleware",
        "django.middleware.common.CommonMiddleware",
        "django.middleware.csrf.CsrfViewMiddleware",
        "django.contrib.auth.middleware.AuthenticationMiddleware",
        "django.contrib.messages.middleware.MessageMiddleware",
        "django.middleware.clickjacking.XFrameOptionsMiddleware",
        "soteria.middleware.current_user.CurrentUserMiddleware",
    ]

    # ------------------ CORS Middleware settings -----------------------------
    # An Origin is defined by the CORS RFC Section 3.2
    # (https://tools.ietf.org/html/rfc6454#section-3.2) as a
    # 'URI scheme + hostname + port', or one of the special values
    # ‘null’ or ‘file://’. Default ports (HTTPS = 443, HTTP = 80) are
    # optional here.

    CORS_ALLOW_ALL_ORIGINS = env.bool("CORS_ALLOW_ALL_ORIGINS", default=True)
    if not CORS_ALLOW_ALL_ORIGINS:
        CORS_ALLOWED_ORIGIN_REGEXES = [
            re.compile(s)
            for s in env(
                "CORS_ALLOWED_ORIGIN_REGEXES",
                default=[
                    "^https://\w+\.api\.merlin-soteria\.in$",  # noqa: W605
                    "^https://\w+\.netlify\.app$",  # noqa: W605
                ],
            )
        ]

    CORS_ALLOW_CREDENTIALS = True
    CORS_ALLOW_HEADERS = list(cors_default_headers) + ["x-organization-id"]

    ORIGINAL_BACKEND = "django.contrib.gis.db.backends.postgis"
    ROOT_URLCONF = "soteria.conf.urls"

    TEMPLATES = [
        {
            "BACKEND": "django.template.backends.django.DjangoTemplates",
            "DIRS": [],
            "APP_DIRS": True,
            "OPTIONS": {
                "context_processors": [
                    "django.template.context_processors.debug",
                    "django.template.context_processors.request",
                    "django.contrib.auth.context_processors.auth",
                    "django.contrib.messages.context_processors.messages",
                ],
            },
        },
    ]

    WSGI_APPLICATION = "soteria.conf.wsgi.application"

    # Database
    # https://docs.djangoproject.com/en/4.0/ref/settings/#databases

    DATABASES = {
        "default": env.db(
            engine="django_tenants.postgresql_backend"
        ),  # require `DATABASE_URL` in environment file
    }

    DATABASE_ROUTERS = ("django_tenants.routers.TenantSyncRouter",)
    # Password validation
    # https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

    AUTH_USER_MODEL = "soteria.User"

    AUTH_PASSWORD_VALIDATORS = [
        {
            "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
        },
        {
            "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
        },
        {
            "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
        },
        {
            "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
        },
    ]

    # Internationalization
    # https://docs.djangoproject.com/en/4.0/topics/i18n/
    LANGUAGE_CODE = "en-us"
    TIME_ZONE = "UTC"
    USE_I18N = True
    USE_L10N = True
    USE_TZ = True

    # Static files (CSS, JavaScript, Images)
    # https://docs.djangoproject.com/en/4.0/howto/static-files/
    STATIC_BASE_DIR = env("STATIC_BASE_DIR", default=BASE_ROOT_DIR)
    STATIC_ROOT = os.path.join(STATIC_BASE_DIR, "static")
    STATIC_URL = "/static/"

    # Default primary key field type
    # https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

    DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

    REST_FRAMEWORK = {
        "DEFAULT_AUTHENTICATION_CLASSES": (
            "rest_framework_simplejwt.authentication.JWTAuthentication",
        ),
        # Exception handling
        "EXCEPTION_HANDLER": "soteria.api.handler.exception_handler",
        "NON_FIELD_ERRORS_KEY": "_generic_errors",
    }

    # ------------------- Exception Hog package settings --------------------------
    EXCEPTIONS_HOG = {
        "EXCEPTION_REPORTING": "soteria.api.handler.exception_reporter",
        "ENABLE_IN_DEBUG": False,
        "NESTED_KEY_SEPARATOR": "__",
        "SUPPORT_MULTIPLE_EXCEPTIONS": True,
    }

    PUBLIC_SCHEMA_NAME = "public"

    # ------------------- File Storage Settings-----------------------------
    DEFAULT_FILE_STORAGE = "storages.backends.s3boto3.S3Boto3Storage"
    AWS_STORAGE_BUCKET_NAME = env("AWS_STORAGE_BUCKET_NAME")
    FILE_UPLOAD_MAX_SIZE = env("FILE_UPLOAD_MAX_SIZE", default=1024 * 1024 * 5)  # 5 MB
    IMAGE_FILE_UPLOAD_MAX_SIZE = env("IMAGE_FILE_UPLOAD_MAX_SIZE", default=1024 * 1024 * 5)  # 5MB

    # --------------------- General settings----------------------------------
    API_ROOT_URL = env("API_ROOT_URL", default="http://127.0.0.1:8000")

    # ----------------- Authentication settings -----------------------------
    SIMPLE_JWT = {
        "ACCESS_TOKEN_LIFETIME": timedelta(
            minutes=env.int("JWT_ACCESS_TOKEN_LIFETIME_MINS", default=5)
        ),
        "REFRESH_TOKEN_LIFETIME": timedelta(
            minutes=env.int("JWT_REFRESH_TOKEN_LIFETIME_MINS", default=60 * 24)
            # 1 day
        ),
        "ROTATE_REFRESH_TOKENS": True,
        "BLACKLIST_AFTER_ROTATION": False,
        "UPDATE_LAST_LOGIN": False,
        "ALGORITHM": "HS256",
        "SIGNING_KEY": env("JWT_SIGNING_KEY", default=SECRET_KEY),
        "VERIFYING_KEY": None,
        "AUDIENCE": None,
        "ISSUER": None,
        "JWK_URL": None,
        "LEEWAY": 0,
        "AUTH_HEADER_TYPES": ("Bearer",),
        "AUTH_HEADER_NAME": "HTTP_AUTHORIZATION",
        "USER_ID_FIELD": "id",
        "USER_ID_CLAIM": "user_id",
        "USER_AUTHENTICATION_RULE": (
            "rest_framework_simplejwt.authentication.default_user_authentication_rule"
        ),
        "AUTH_TOKEN_CLASSES": ("rest_framework_simplejwt.tokens.AccessToken",),
        "TOKEN_TYPE_CLAIM": "token_type",
        "JTI_CLAIM": "jti",
        "SLIDING_TOKEN_REFRESH_EXP_CLAIM": "refresh_exp",
        "SLIDING_TOKEN_LIFETIME": timedelta(
            minutes=env("JWT_SLIDING_TOKEN_LIFETIME_MINS", default=5)
        ),
        "SLIDING_TOKEN_REFRESH_LIFETIME": timedelta(
            minutes=env("JWT_SLIDING_TOKEN_REFRESH_LIFETIME_MINS", default=60 * 24)
        ),
    }

    # -----------------------Reset Password Configrations ----------------------

    RESET_PASSWORD_URL = env("RESET_PASSWORD_URL")
    RESET_PASSWORD_URL_TIMEOUT_SECS = env.int(
        "RESET_PASSWORD_URL_TIMEOUT_SECS", default=60 * 60 * 24 * 2
    )

    # --------------------- Email Configurations -----------------------------
    EMAIL_BACKEND = env("EMAIL_BACKEND", default="django.core.mail.backends.smtp.EmailBackend")
    EMAIL_HOST = env("EMAIL_HOST")
    EMAIL_PORT = env.int("EMAIL_PORT")
    EMAIL_USE_TLS = env.bool("EMAIL_USE_TLS")
    EMAIL_HOST_USER = env("EMAIL_HOST_USER")
    EMAIL_HOST_PASSWORD = env("EMAIL_HOST_PASSWORD")
    DEFAULT_FROM_EMAIL = env("DEFAULT_FROM_EMAIL", default=EMAIL_HOST_USER)

    # ----------------Celery settings--------------------------------------
    CELERY_BROKER_URL = env("CELERY_BROKER_URL")
    # Ensure workers run async by default
    # in Development you might want them to run in-process
    # though it would cause timeouts/recursions in some cases
    CELERY_TASK_ALWAYS_EAGER = env.bool("CELERY_TASK_ALWAYS_EAGER", default=False)
    CELERY_TASK_EAGER_PROPAGATES = True
    CELERY_ACCEPT_CONTENT = [
        "application/json",
        "application/x-python-serialize",
    ]
    CELERY_TASK_SERIALIZER = "json"
    CELERY_RESULT_SERIALIZER = "json"
    CELERY_TIMEZONE = "UTC"
    CELERY_RESULT_BACKEND = env("CELERY_RESULT_BACKEND", default=None)
    CELERY_TASK_IGNORE_RESULT = env.bool("CELERY_TASK_IGNORE_RESULT", default=True)
    CELERY_RESULT_EXPIRES = env.int("CELERY_RESULT_EXPIRES_SECS", default=60 * 60)  # 1hour
    CELERY_BEAT_SCHEDULE_FILENAME = os.path.join(tempfile.gettempdir(), "soteria-celerybeat")
    # A list of additional celery tasks module other than django app `tasks`
    # module
    CELERY_IMPORTS = ()

    # periodic tasks' config added here
    CELERY_BEAT_SCHEDULE = {
        "create_job_tasks": {
            "task": "soteria.atms.tasks.create_job_tasks",
            "schedule": crontab(minute="*/1"),  # default(every 1 minutes)
        },
        "set_daily_task_as_overdue": {
            "task": "soteria.atms.tasks.set_daily_task_as_overdue",
            "schedule": crontab(minute=5, hour=0),  # at midnight 00:05
        },
    }

    # -----------------------SMS SETTINGS---------------------------------
    SMS_CLIENTS = {
        "emailbased": {
            "BACKEND": "soteria.sms.backends.emailbased.EmailBased",
            "OPTIONS": {
                "EMAIL_TO": env("EMAIL_BASED_EMAIL_TO", default=None),
            },
        },
        "valuefirst": {
            "BACKEND": "soteria.sms.backends.valuefirst.ValueFirst",
            "OPTIONS": {
                "VALUEFIRST_USERNAME": env("VALUEFIRST_USERNAME", default=None),
                "VALUEFIRST_PASSWORD": env("VALUEFIRST_PASSWORD", default=None),
                "VALUEFIRST_AUTH_TOKEN": env("VALUEFIRST_AUTH_TOKEN", default=None),
            },
        },
        "airtel": {
            "BACKEND": "soteria.sms.backends.airtel.Airtel",
            "OPTIONS": {
                "AIRTEL_LOGIN_ID": env("AIRTEL_LOGIN_ID"),
                "AIRTEL_PASSWORD": env("AIRTEL_PASSWORD"),
                "AIRTEL_SENDER_ID": env("AIRTEL_SENDER_ID", default="SOTSOC"),
                "AIRTEL_DLT_CT_ID": env("AIRTEL_DLT_CT_ID", default="1007736938141222629"),
                "AIRTEL_DLT_PE_ID": env("AIRTEL_DLT_PE_ID", default="1001445814935980866"),
                "AIRTEL_ROUTE_ID": env("AIRTEL_ROUTE_ID", default="DLT_SERVICE_IMPLICT"),
                "AIRTEL_UNICODE": env.int("AIRTEL_UNICODE", default=0),
                "AIRTEL_CAMP_NAME": env("AIRTEL_CAMP_NAME", default="soteriac_u"),
            },
        },
    }
    DEFAULT_SMS_CLIENT_ALIAS = env("DEFAULT_SMS_CLIENT", default="emailbased")
    DEFAULT_SMS_SENDER_NAME = env("SMS_SENDER_NAME", default="SOTERIA")
    DEFAULT_SMS_OTP_LENGTH = env("SMS_OTP_LENGTH", default=4)
    DEFAULT_SMS_OTP_EXPIRY_SEC = env("SMS_OTP_EXPIRY_SEC", default=300)
    MAX_SMS_MESSAGE_LENGTH = env("MAX_SMS_MESSAGE_LENGTH", default=160)
    DEFAULT_CALLING_CODE = "91"
    ALLOWED_CALLING_CODES = ["91"]
    MAX_MESSAGE_LENGTH = 160

    # ---------------GDAL PATH ---------------------------------------------
    GDAL_LIBRARY_PATH = env("GDAL_LIBRARY_PATH", default="")
    GEOS_LIBRARY_PATH = env("GEOS_LIBRARY_PATH", default="")

    # ----------------- Cache settings --------------------------------------
    DJANGO_CACHE_REDIS_URL = env("DJANGO_CACHE_REDIS_URL", default="")
    if DJANGO_CACHE_REDIS_URL:
        print('Using "Redis" for Django Cache')
        CACHES = {
            "default": {
                "BACKEND": "django_redis.cache.RedisCache",
                "LOCATION": DJANGO_CACHE_REDIS_URL,
                "OPTIONS": {
                    "CLIENT_CLASS": "django_redis.client.DefaultClient",
                },
                "KEY_PREFIX": "soteria",
            }
        }
    else:
        # by default django use in-memory as cache storage
        print('Using "In-Memory" for Django Cache')

    # ------------------ Role Management ------------------------------------
    # Organization member roles and permissions
    ORGANIZATION_MEMBER_DEFAULT_ROLE = env("ORGANIZATION_MEMBER_DEFAULT_ROLE", default="client")
    ORGANIZATION_MEMBER_ROLES_CONFIG_FILE = env(
        "ORGANIZATION_MEMBER_ROLES_CONFIG_FILE", default="roles.json"
    )
    ORG_MEMBER_INVITE_URL_PATH = env("ORG_MEMBER_INVITE_URL_PATH")


class Development(BaseConfiguration):
    # Quick-start development settings - unsuitable for production
    # See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/
    pass


class Staging(BaseConfiguration):
    DEBUG = False


class Production(BaseConfiguration):
    DEBUG = False
